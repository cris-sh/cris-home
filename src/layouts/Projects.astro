---
import type { CollectionEntry } from "astro:content";
import BaseHead from "../components/BaseHead.astro";
import FormattedDate from "../components/FormattedDate.astro";
import NavBar from "../components/navigation/NavBar.astro";

type Props = CollectionEntry<"projects">["data"] & {
  lang?: string;
};

const {
  title,
  description,
  tags,
  date,
  updatedDate,
  heroImage,
  demoUrl,
  archived,
  lang = "en",
} = Astro.props;

function getTagColor(tag: string) {
  const colors: { [key: string]: string } = {
    css: "bg-blue-300",
    html: "bg-orange-300",
    javascript: "bg-yellow-300",
    typescript: "bg-blue-400",
    python: "bg-green-300",
    dart: "bg-blue-500",
    java: "bg-red-500",
    csharp: "bg-purple-500",
    "c++": "bg-blue-600",
    go: "bg-green-400",
    rust: "bg-orange-400",
    php: "bg-blue-200",
    kotlin: "bg-green-200",
  };

  return colors[tag.toLowerCase()] || "bg-gray-300";
}
---

<html lang={lang}>
  <head>
    <BaseHead title={title} description={description} />
    <style>
      .prose {
        max-width: 100%;
        color: rgb(var(--gray-dark));
      }

      .prose img {
        border-radius: 8px;
        margin: 1.5rem auto;
        box-shadow: var(--box-shadow);
      }
    </style>
  </head>

  <body>
    <NavBar />

    <!-- Estructura principal centrada con clases de Tailwind -->
    <main class="container mx-auto px-4 max-w-4xl">
      <article class="mt-6 md:mt-10">
        <!-- Imagen principal del proyecto -->
        {
          heroImage && (
            <div class="mb-8">
              <img
                src={heroImage}
                alt=""
                class="w-full h-auto rounded-xl object-cover shadow-lg"
                style="max-height: 500px;"
              />
            </div>
          )
        }

        <!-- Cabecera del proyecto -->
        <div class="mb-8 text-center">
          <div class="mb-2 text-white/60">
            <FormattedDate date={date} lang={lang} />
            {
              updatedDate && (
                <div class="mt-1 text-white/50 text-sm italic">
                  {lang === "es" ? "Actualizado el " : "Last updated on "}
                  <FormattedDate date={updatedDate} lang={lang} />
                </div>
              )
            }
          </div>

          <h1 class="text-3xl md:text-4xl font-bold mb-4">{title}</h1>

          <!-- Enlaces de demostración si existen -->
          {
            demoUrl && (
              <div class="mb-4">
                <a
                  href={demoUrl}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="inline-flex items-center text-blue-400 hover:underline"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-5 w-5 mr-2"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                  >
                    <path
                      fill-rule="evenodd"
                      d="M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z"
                      clip-rule="evenodd"
                    />
                  </svg>
                  {lang === "es" ? "Ver demostración" : "View demo"}
                </a>
              </div>
            )
          }

          <!-- Etiquetas del proyecto -->
          <div class="flex flex-wrap gap-2 justify-center mb-4">
            {
              tags.map((tag) => (
                <div class="flex items-center px-3 py-1 bg-black/30 rounded-full">
                  <span
                    class={`w-2 h-2 rounded-full mr-2 ${getTagColor(tag)}`}
                  />
                  <span class="text-sm text-white/80">{tag}</span>
                </div>
              ))
            }
          </div>

          {
            archived && (
              <div class="inline-block px-3 py-1 mb-4 text-sm bg-red-500/20 text-red-300 rounded-full">
                {lang === "es" ? "Archivado" : "Archived"}
              </div>
            )
          }

          <div class="border-t border-white/10 w-24 mx-auto pt-2"></div>
        </div>

        <!-- Contenido del proyecto -->
        <div
          class="prose mx-auto bg-black/10 p-6 md:p-8 rounded-xl border border-white/5"
        >
          <slot />
        </div>

        <!-- Enlace para volver atrás -->
        <div class="mt-8 mb-12">
          <a
            href={lang === "es" ? "/es/projects/" : "/projects/"}
            class="inline-flex items-center text-white/70 hover:text-white transition-colors"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-5 w-5 mr-2"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path
                fill-rule="evenodd"
                d="M9.707 14.707a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 1.414L7.414 9H15a1 1 0 110 2H7.414l2.293 2.293a1 1 0 010 1.414z"
                clip-rule="evenodd"></path>
            </svg>
            {
              lang === "es"
                ? "Volver a todos los proyectos"
                : "Back to all projects"
            }
          </a>
        </div>
      </article>
    </main>
  </body>
</html>

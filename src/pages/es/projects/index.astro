---
import BaseHead from "../../../components/BaseHead.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "../../../consts";
import { getCollection } from "astro:content";
import FormattedDate from "../../../components/FormattedDate.astro";
import NavBar from "../../../components/navigation/NavBar.astro";

const projects = (
  await getCollection("projects", (project) => {
    const matches = project.id.startsWith("es/") || project.data.lang === "es";
    return matches;
  })
).sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());

const getSlug = (id: any) => {
  const parts = id.split("/");
  return parts.length > 1 ? parts[1] : id;
};

function getTagColor(tag: string) {
  const colors: { [key: string]: string } = {
    css: "bg-blue-300",
    html: "bg-orange-300",
    javascript: "bg-yellow-300",
    typescript: "bg-blue-400",
    python: "bg-green-300",
    dart: "bg-blue-500",
    java: "bg-red-500",
    csharp: "bg-purple-500",
    "c++": "bg-blue-600",
    go: "bg-green-400",
    rust: "bg-orange-400",
    php: "bg-blue-200",
    kotlin: "bg-green-200",
  };

  return colors[tag.toLowerCase()] || "bg-gray-300";
}
---

<!doctype html>
<html lang="es">
  <head>
    <BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
    <style>
      .hidden {
        display: none;
      }
    </style>
  </head>
  <body>
    <NavBar />
    <main class="container mx-auto px-4 max-w-4xl">
      <div class="mb-8 flex flex-col items-center">
        <div class="w-full max-w-xl mb-4">
          <input
            type="text"
            id="project-search"
            placeholder="buscar proyectos por nombre, descripción o etiquetas"
            aria-label="buscar proyectos"
            class="w-full px-4 py-2 rounded-lg bg-black/20 border border-white/20 text-white focus:outline-none focus:ring-2 focus:ring-white/50"
          />
        </div>

        <div class="flex items-center space-x-2">
          <input
            type="checkbox"
            id="sort-newest"
            checked,
            class="w-4 h-4 accent-white/80"
          />
        </div>
      </div>

      <div
        class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
        id="projects-list"
      >
        {
          projects.map((project) => (
            <div
              class="project-item bg-black/20 border border-white/10 rounded-xl overflow-hidden hover:border-white/30 transition-all duration-300"
              data-title={project.data.title.toLowerCase()}
              data-description={project.data.description.toLowerCase()}
              data-tags={project.data.tags.join(", ")}
              data-date={project.data.date.valueOf().toString()}
            >
              <div class="p-5">
                <div class="flex justify-between items-start mb-2">
                  <h3 class="text-xl font-semibold">
                    <a
                      href={`/es/projects/${getSlug(project.id)}/`}
                      class="hover:text-white/80 transition-colors"
                    >
                      {project.data.title}
                    </a>
                  </h3>

                  <div class="text-sm text-white/60">
                    <FormattedDate date={project.data.date} lang="en" />
                    {project.data.updatedDate && (
                      <span>
                        {" "}
                        -{" "}
                        <FormattedDate
                          date={project.data.updatedDate}
                          lang="es"
                        />
                      </span>
                    )}
                  </div>
                </div>

                {project.data.demoUrl && (
                  <div class="mb-2">
                    <a
                      href={project.data.demoUrl}
                      target="_blank"
                      rel="noopener noreferrer"
                      class="text-sm text-blue-400 hover:underline inline-flex items-center"
                    >
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        class="h-4 w-4 mr-1"
                        viewBox="0 0 20 20"
                        fill="currentColor"
                      >
                        <path
                          fill-rule="evenodd"
                          d="M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z"
                          clip-rule="evenodd"
                        />
                      </svg>
                      {project.data.demoUrl}
                    </a>
                  </div>
                )}

                <p class="text-white/70 mb-3 line-clamp-2">
                  {project.data.description}
                </p>

                <div class="flex flex-wrap gap-2">
                  {project.data.tags.map((tag) => (
                    <div class="flex items-center">
                      <span
                        class={`w-2 h-2 rounded-full mr-1 ${getTagColor(tag)}`}
                      />
                      <span class="text-xs text-white/60">{tag}</span>
                    </div>
                  ))}
                </div>

                {project.data.archived && (
                  <div class="mt-3 inline-block px-2 py-4 text-xs bg-red-500/20 text-red-300 rounded">
                    archivado
                  </div>
                )}
              </div>
            </div>
          ))
        }
      </div>

      <div id="empty-state" class="hidden py-16 text-center text-white/60">
        <h3 class="text-xl mb-2">no se encontraron proyectos</h3>
        <p>intenta ajustar tu búsqueda</p>
      </div>
    </main>

    <script is:inline>
      function debounce(func, wait) {
        let timeout = null;
        return function (...args) {
          if (timeout !== null) {
            clearTimeout(timeout);
          }
          timeout = setTimeout(() => func(...args), wait);
        };
      }

      document.addEventListener("DOMContentLoaded", () => {
        const projectsList = document.getElementById("projects-list");
        const projectItems = document.querySelectorAll(".project-item");
        const searchInput = document.getElementById("project-search");
        const sortNewestCheckbox = document.getElementById("sort-newest");
        const emptyState = document.getElementById("empty-state");

        function filterProjects() {
          const searchTerm = searchInput.value.toLowerCase();
          let visibleCount = 0;

          projectItems.forEach((item) => {
            const title = item.dataset.title || "";
            const description = item.dataset.description || "";
            const tags = (item.dataset.tags || "")
              .split(",")
              .map((tag) => tag.trim());

            const matchesSearch =
              title.includes(searchTerm) ||
              description.includes(searchTerm) ||
              tags.some((tag) => tag.toLowerCase().includes(searchTerm));

            if (matchesSearch) {
              item.style.display = "";
              visibleCount++;
            } else {
              item.style.display = "none";
            }
          });

          // Mostrar u ocultar el estado vacío
          if (visibleCount === 0) {
            emptyState.classList.remove("hidden");
            projectsList.classList.add("hidden");
          } else {
            emptyState.classList.add("hidden");
            projectsList.classList.remove("hidden");
          }
        }

        function sortProjects() {
          const sortByNewest = sortNewestCheckbox.checked;
          const items = Array.from(projectItems);

          items.sort((a, b) => {
            const dateA = parseInt(a.dataset.date || "0");
            const dateB = parseInt(b.dataset.date || "0");

            return sortByNewest ? dateB - dateA : dateA - dateB;
          });

          items.forEach((item) => {
            projectsList.appendChild(item);
          });
        }

        searchInput.addEventListener("input", debounce(filterProjects, 300));
        sortNewestCheckbox.addEventListener("change", () => {
          sortProjects();
        });

        sortProjects();
        filterProjects();
      });
    </script>
  </body>
</html>
